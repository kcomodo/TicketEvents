<!--use the Amodel directive to specify the type of data the view will receive. 
This allows the view to strongly type the data it’s working with.-->
@model IEnumerable<MVC_DataAccess.Models.CustomerModel>

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>Customer Interaction</title>
</head>
<body>
    <h1>Customer Interaction Page</h1>

    <!-- Form to Add a Customer -->
   
    <h2>Add a Customer</h2>
    <!--@Url is a razor syntax helper that auto generates a URL for the specify method-->
    <!--Left is Controller method and right is the folder-->
    <!--Razor has likes to reduce work so instead of the controller being called CustomerController
        They don't include the word controller
        Or use this action="/Customer/AddCustomerController"
    -->
    <form method="post" action="@Url.Action("AddCustomerControllerMethod", "Customer")">
        <label for="FirstName">First Name:</label>
        <input type="text" id="FirstName" name="FirstName" required />
        <br />
        <label for="LastName">Last Name:</label>
        <input type="text" id="LastName" name="LastName" required />
        <br />
        <label for="Email">Email:</label>
        <input type="email" id="Email" name="Email" required />
        <br />
        <label for="Password">Password:</label>
        <input type="password" id="Password" name="Password" required />
        <br />
        <button type="submit">Add Customer</button>
    </form>
    <h2>Update A Customer</h2>
    <form method="post" action="@Url.Action(")">

    </form>
    <h2>Delete A Customer</h2>
    <!--Use post for deletion because html only supports GET and POST for some reason (sub categories of post)-->
    <form method="post" action= "@Url.Action("DeleteCustomerControllerMethod", "Customer")">
        <label for="Email">Email:</label>
        <input type="text" id="Email" name="Email" required />
        <br />
        <button type="submit">Delete Customer</button>
    </form>
    <!-- Display Existing Customers -->
    <h2>Existing Customers</h2>
    <table>
        <thead>
            <tr>
                <th>Customer ID</th>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Email</th>
                <th>Password</th>

            </tr>
        </thead>
        <tbody>
            <!--Model is represented as -->
            @foreach (var customer in Model)
            {
                <tr>
                    <td>@customer.CustomerId</td>
                    <td>@customer.FirstName</td>
                    <td>@customer.LastName</td>
                    <td>@customer.Email</td>
                    <td>@customer.Password</td>
                </tr>
            }
        </tbody>
    </table>
</body>
</html>
